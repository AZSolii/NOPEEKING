integer LINK_MATERIA_SLOT = 300;
integer LINK_MATERIA_SUPPORT_TOGGLE = 302;
integer LINK_SCANNER_REQUEST = 400;

float Reach = 2.0;

list MateriaListSummon = 
	["Ifrit"];
list MateriaListCommand = 
	["Critical"];
list MateriaListMagic   = 
	["Restore"];
list MateriaListSupport = 
	["Quicken"];
list MateriaListIndependent = 
	["Strength+"];

//Name, Level, IsSupportGroupActive
list Slots = ["NULL", 0, FALSE, "NULL", 0, FALSE, "NULL", 0, FALSE, "NULL", 0, FALSE, "NULL", 0,
			  "NULL", 0, FALSE, "NULL", 0, FALSE, "NULL", 0, FALSE, "NULL", 0, FALSE, "NULL", 0];
			  
list LinkGroup = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4];

export()
{
    llMessageLinked(LINK_SET, LINK_MATERIA_SLOT, llList2CSV(Slots), NULL_KEY);
}
generateScannerRequest(string ScanType, string TargetType, float ScanRange, 
		integer OutputChannel, string OutputExternal, string OutputInternal){
	llMessageLinked(LINK_SET, LINK_SCANNER_REQUEST, 
		[ScanType, TargetType, ScanRange, OutputChannel, OutputExternal, OutputInternal], NULL_KEY);
}
default
{
    state_entry()
    {
        
    }
	link_message(integer linknum, integer num, string str, key id)
	{
		if(num == LINK_MATERIA_SUPPORT_TOGGLE){
			integer group = (integer)llFloor((float)str / 2.0);
			integer slot = 6 * group;
			integer val = llList2Integer(Slots, slot+2);
			
			if(val == TRUE)
				val = FALSE;
			else
				val = TRUE;
			
			Slots = llListReplaceList(Slots, val, slot+2, slot+2);
			Slots = llListReplaceList(Slots, val, slot+5, slot+5);
			
			export();
		}
		else if(num == LINK_MATERIA_USE){
			list temp = llParseString2List(str, ["/"], []);
			string type = llList2String(temp,0);
			string name = llList2String(temp,1);
			integer lv  = llList2Integer(temp,2);
			if(type == "COMMAND"){
				if(name == "Doublecut"){
					list out = ["RAY", "AGENT", Reach, "DEBUG: Update this later.", 0, "NULL"];
					llMessageLinked(LINK_SET, LINK_SCANNER_REQUEST, llDumpList2String(out, ";"), NULL_KEY);
					llMessageLinked(LINK_SET, LINK_SCANNER_REQUEST, llDumpList2String(out, ";"), NULL_KEY);
				}
			}
		}
	}
}
